module Main where 

type AuctionAccId = ContractId AuctionAcc
type BidAuctionId = ContractId BidAuction

data Cash = Cash with
    value: Decimal 
    currency: Text 
        deriving (Show, Eq, Ord)

template AuctionAcc
    with
        auctioneer: Party
        bidder: Party
        
        bidderId: Text
        bidderName: Text
        bidderPhone: Optional Text
        isVerified: Bool
        accBalance: Cash
    
    where
        signatory auctioneer
        observer bidder

        key (auctioneer, bidderId): (Party, Text)
        maintainer key._1

        choice CreateAcc: AuctionAccId
            with
                appBidderId: Text
                appBidderName: Text
                appBidderPhone: Optional Text  
            controller bidder
            do
                -- assertMsg "Account already exists" (not exists lookupByKey @AuctionAcc (auctioneer, bidderId))
                create this with
                    bidderId = appBidderId 
                    bidderName = appBidderName
                    bidderPhone = appBidderPhone  
             
        choice VerifyAcc: AuctionAccId
            with
                isVerified: Bool
            controller auctioneer
            do
                -- assertMsg "Account does not exist" (exists @AuctionAcc (auctioneer, bidderId))
                assertMsg "Account already verified" isVerified 
                create this with
                    isVerified = True 
        
        choice Deposit: AuctionAccId
            with
                amount: Decimal 
            controller bidder
            do 
                assertMsg "Account not verified" ( isVerified)
                assertMsg "Deposit amount must be positive" (amount > 0.0)
                create this with
                    accBalance.value = accBalance.value + amount
 
template BidAuction
    with
        auctioneer: Party
        bidder: Party
        highestBid: Cash
        highestBidder: Party
        itemName: Text
        itemDetails: Text
        reservePrice: Cash
        endDate: Date
        isActive: Bool

    where
        signatory auctioneer
        observer bidder

        key (auctioneer, itemName): (Party, Text)
        maintainer key._1

        ensure isActive
        -- Choice Bid- can work in 2 ways
        -- 1. Bidder can bid for an item and if the bid is higher than the highest bid, then the highest bid is updated and auction is still active and no amount is deducted from AuctionAcc, also bidder cannot bid more than what he has in the AuctionAcc.
        -- 2. Bidder can bid for an item and if the bid is higher than the highest bid and the reserve price is met, then the highest bid is updated and auction is no longer active and amount is deducted from AuctionAcc.

        choice Bid: ContractId BidAuction
            with
                bidAmount: Decimal
                bidderId: Text
            controller bidder
            
            do
                -- Check if the auction is active
                assertMsg "Auction is not active" isActive 

                -- Check if the bid amount is greater than the current highest bid
                assertMsg "Bid amount must be greater than the current highest bid" (bidAmount > highestBid.value)

                -- Check if the bidder has enough balance in the AuctionAcc
                bidderAcc <- fetchByKey @AuctionAcc (auctioneer, bidderId)
                assertMsg "Bidder does not have a verified AuctionAcc" ( bidderAcc._2.isVerified)
                let acc = bidderAcc._2 
                assertMsg "Bidder does not have enough balance to place the bid" (acc.accBalance.value >= bidAmount)

                -- Update the highest bid and highest bidder
                create this with
                    highestBid = Cash{value = bidAmount,currency = "USD"}
                    highestBidder = bidder 
     
        choice FinalizeAuction: BidAuctionId
            controller auctioneer
            do
                assertMsg "Auction is not active" isActive
                assertMsg "Reserve price not met" (highestBid.value >= reservePrice.value)
                create this with
                    isActive = False

        choice Cancel: BidAuctionId
            controller auctioneer
            do
                assertMsg "Auction is not active" isActive
                create this with
                    isActive = False
